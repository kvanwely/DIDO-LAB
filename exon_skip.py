#this script takes a reference exon model (.BED), a gene model (.BED), and junctions as generated by Tophat2
#it then counts how often each exon is skipped, excluding the exons flanking gene boundaries
#output is a count number for each line in the input model

from __future__ import print_function
import sys
from argparse import ArgumentParser, FileType

# get reference exons from bed file and format output exons for printing

def open_exons (ref_file,ref_exons):
     
    #exon = ['','','','','','']
    
    del ref_exons[:]
    
    reffile = open(ref_file)
    for line in reffile: 
         
        exon = line.rstrip('\n')
         
        
        ref_exons.append(exon)
        
    reffile.close ()
    return ref_exons
    
# get junctions from tophat2 junctions.bed file and put values in same order as exons. 

def open_genes (do_chrom,gene_file,ref_genes):
     
    gene = [] 
    
    del ref_genes[:]
        
    genefile = open(gene_file)
    for line in genefile:
        
        line = line.rstrip('\n')
        
        try:
            gene_1 = line.split('\t')
        except ValueError:
            continue

        gene_chrom = gene_1[0]
        gene_strand = gene_1[5]
        gene_name = gene_1[3]
        gene_strand = gene_strand[0]
        gene_left = gene_1[1]
        gene_right = gene_1[2]
        gene_dept = "0"
        
        if gene_chrom != do_chrom:
            continue
        else:
            gene = [gene_chrom,gene_left,gene_right,gene_name,gene_dept,gene_strand]  
            ref_genes.append(gene)
    
    genefile.close ()
    return ref_genes
    
def open_junctions (do_chrom,in_file,test_junctions):
     
    del test_junctions[:]
        
    infile = open(in_file)
    for line in infile:
        
        line = line.rstrip('\n')
        
        try:
            test_chrom, test_left, test_right, test_name, test_dept, test_strand, someval_1, someval_2, colorstuff, someval_3, overhangs, someval_4  = line.split('\t')
        except ValueError:
            continue
        
        try:
             overhang_left, overhang_right = overhangs.split(',')
        except ValueError:
            continue
        
        test_strand = test_strand[0]
        if test_chrom != do_chrom:
            continue
        else:
            junction = [test_chrom,test_left,test_right,test_name,test_dept,test_strand,overhang_left,overhang_right]  
            test_junctions.append(junction)
    
    infile.close ()
    return test_junctions

    
# test how many times each exon is skipped

def skip_counter(gene_file,ref_file,in_file):
    
# define which rows are where for convenience
    chromrow = 0
    leftrow = 1
    rightrow = 2
    namerow = 3
    deptrow = 4
    strandrow = 5
    exon = []
    gene = []
    junction = []
    ref_exons = []
    ref_genes = []
    test_junctions = []
    prev_chrom = 'abc' 
        
    open_exons (ref_file,ref_exons)
    
    for exon in ref_exons:   
        
        out_line = '' 
        skip_count = 0
        
        try:
             exon_1 = exon.split('\t')
        except ValueError:
             continue
                      
        ref_chrom = exon_1[0]
        ref_strand = exon_1[5]   
        ref_strand = ref_strand[0]
        ref_leftcoord = int(exon_1[1]) 
        ref_rightcoord = int(exon_1[2])
        ref_dept_val = int(exon_1[4])
        ref_name = exon_1[3]
        
        if ref_chrom != prev_chrom:
            open_junctions (ref_chrom,in_file,test_junctions)
            open_genes (ref_chrom,gene_file,ref_genes)
            prev_chrom = ref_chrom
        
        fin_leftcoord = 0
        fin_rightcoord = 0
         
        for gene_2 in ref_genes:
            gene_leftcoord = int(gene_2[1]) - 105
            gene_rightcoord = int(gene_2[2]) + 105
            gene_strand = gene_2[5]
            gene_strand = gene_strand[0]
            gene_name = gene_2[3]
            if ref_leftcoord > gene_leftcoord and ref_rightcoord < gene_rightcoord and ref_name == gene_name:
                fin_leftcoord = gene_leftcoord 
                fin_rightcoord = gene_rightcoord 
                    
        for junction in test_junctions:
                
            test_chrom = junction[0] 
            test_leftcoord = int(junction[1]) + int(junction[6])
            test_rightcoord = int(junction[2]) - int(junction[7])
            test_name = junction[3]
            test_dept_val = int(junction[4])
            test_strand = junction[5]
            test_strand = test_strand[0]    
                        
            if test_leftcoord > fin_leftcoord and test_rightcoord < fin_rightcoord:
                if ref_chrom == test_chrom and ref_strand == test_strand and ref_leftcoord > test_leftcoord and ref_rightcoord < test_rightcoord:
                    skip_count = skip_count + test_dept_val 
         
        out_line = '' 
        out_line = exon + '\t' + str(skip_count)
        print (out_line)       
  
# argument parser
if __name__ == '__main__':
    parser = ArgumentParser(
        description='check exon skiping')
    parser.add_argument('gene_file', nargs='?', type=str, help='reference gene model')    
    parser.add_argument('ref_file',nargs='?',type=str, help='input BED file')
    parser.add_argument('in_file',nargs='?',type=str, help='input junctions')   
    args = parser.parse_args()
    if not args.gene_file and args.ref_file and args.in_file:
            parser.print_help()
            exit(1)
    skip_counter(args.gene_file,args.ref_file,args.in_file)
    
        