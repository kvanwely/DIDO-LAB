# this sript is used to remove low quality junctions from the superfile generated by the superfile script
# simple selection can be done by selecting junctions that have at least num_hits coverage and min_anchor 
# of base pairing for the anchors on either side

#import built-in modules
import os,sys
if sys.version_info[0] != 2 or sys.version_info[1] != 7:
     print >>sys.stderr, "\nYou are using python" + str(sys.version_info[0]) + '.' + str(sys.version_info[1]) + " RSeQC needs python2.7!\n"
     sys.exit()

import re
import string
from optparse import OptionParser
import warnings
import string
import collections
import math
import sets

__license__ = "GPL"
__version__="2.6"

# get junctions from tophat2 junctions.bed file and put values in same order as junc1s. 

        
def open_junctions (junc1_chrom,juncs_file,test3_junctions):
     
    del test3_junctions[:]
        
    infile = open(juncs_file,"r")
    for junc2_line in infile:
        
        junc2_line = junc2_line.rstrip('\n')
        if junc2_line.startswith("chr"):

            try:
                junc2_data = junc2_line.split('\t') 
            except ValueError:
                #print >>sys.stderr,"skipped line"
                continue
        
            junc2_chrom = junc2_data[0]
            if junc2_chrom.upper() == junc1_chrom.upper():
                test3_junctions.append(junc2_line)
            if junc1_chrom.upper() == "ALL":
                test3_junctions.append(junc2_line)
                    
    infile.close ()
    return test3_junctions
    
    
def get_fasta (num_hits,min_anchor,juncs_file,out_file):
    
    list_data = []
    junction = []

    fasta_data = []
    test1_junctions = []
    test2_junctions = []
    out_series = []
    prev_chrom = 'abc' 
    
    all_junctions = []
    test_junctions=[]
    
    out_junctions =[]
    
    leftover_junctions = []
    
    outfile = open(out_file,'w')
    
    open_junctions("all",juncs_file,test1_junctions)    
        
    for junc34 in test1_junctions:
        all_junctions.append(junc34)
            
    for junc1 in all_junctions:
                
        try:
            junc1_chrom, junc1_left, junc1_right, junc1_name, junc1_depth, junc1_strand, someval1_1, someval1_2, colorstuff1, someval1_3, overhangs1, someval1_4  = junc1.split('\t')
        except ValueError:
            continue
                        
        #print >>sys.stderr, junc1_chrom + "      " + junc1_left + "       " + junc1_right + "   \r"
                                    
        try:
             overhang1_left, overhang1_right = overhangs1.split(',')
        except ValueError:
            continue
                                            
        junction_1 = [junc1_chrom,junc1_left,junc1_right,junc1_name,junc1_depth,junc1_strand,overhang1_left,overhang1_right]  
        
        junc1_chrom = junction_1[0] 
        junc1_leftcoord = int(junction_1[1]) + int(junction_1[6])
        junc1_rightcoord = int(junction_1[2]) - int(junction_1[7])
        junc1_name = junction_1[3]
        junc1_depth_val = int(junction_1[4])
        junc1_strand = junction_1[5]
        junc1_strand = junc1_strand[0]
        
        overhangs1_total = overhang1_left + overhang1_right
                    
        if junc1_depth_val >= num_hits and overhang1_left >= min_anchor and overhang1_right >= min_anchor:
            print >>outfile, junc1
        
        print >>sys.stderr, junc1_chrom + "      " + junc1_left + "       " + junc1_right + "                 \r",
            
    print >>sys.stderr, "\n",           
    print >>sys.stderr, "Done  "

def main():
    usage = "%prog [options]" + "\n"
    parser = OptionParser(usage,version="%prog " + __version__)   
    parser.add_option("-n","--num_hits",action="store",type="int",dest="num_hits",help="dept cutoff [required]")
    parser.add_option("-a","--anchor",action="store",type="int",dest="min_anchor",help="width cutoff [required]")
    parser.add_option("-j","--juncs-file",action="store",type="string",dest="juncs_file",help="input junctions")
    parser.add_option("-o","--out-file",action="store",type="string",dest="out_file",help="output file")   

    (options,args)=parser.parse_args()

    if not (options.num_hits and options.min_anchor and options.juncs_file and options.out_file):
        parser.print_help()
        sys.exit(0)
    else:
        get_fasta (options.num_hits,options.min_anchor,options.juncs_file,options.out_file)

if __name__ == '__main__':
     main()
    
        